--- buildroot/target/makedevs/makedevs.c	2006-10-20 09:15:08.000000000 +0200
+++ ../eric/buildroot/target/makedevs/makedevs.c	2006-10-25 18:38:01.953125000 +0200
@@ -405,8 +405,7 @@ int main(int argc, char **argv)
 		char user[41];
 		char group[41];
 		char *full_name;
-		uid_t uid;
-		gid_t gid;
+		struct stat st;
 
 		linenum++;
 
@@ -424,42 +423,23 @@ int main(int argc, char **argv)
 		if (name[0] == '#') {
 			continue;
 		}
-		if (*group) {
-			gid = get_ug_id(group, my_getgrnam);
-		} else {
-			gid = getgid();
-		}
-		if (*user) {
-			uid = get_ug_id(user, my_getpwnam);
-		} else {
-			uid = getuid();
-		}
-		full_name = concat_path_file(rootdir, name);
 
+		full_name = concat_path_file(rootdir, name);
 		if (type == 'd') {
+			chown(full_name, getuid(), getgid()); // change owner if file exists
 			bb_make_directory(full_name, mode | S_IFDIR, FILEUTILS_RECUR);
-			if (chown(full_name, uid, gid) == -1) {
-				bb_perror_msg("line %d: chown failed for %s", linenum, full_name);
-				ret = EXIT_FAILURE;
-				goto loop;
-			}
 			if ((mode != -1) && (chmod(full_name, mode) < 0)){
 				bb_perror_msg("line %d: chmod failed for %s", linenum, full_name);
 				ret = EXIT_FAILURE;
 				goto loop;
 			}
 		} else if (type == 'f') {
-			struct stat st;
 			if ((stat(full_name, &st) < 0 || !S_ISREG(st.st_mode))) {
 				bb_perror_msg("line %d: regular file '%s' does not exist", linenum, full_name);
 				ret = EXIT_FAILURE;
 				goto loop;
 			}
-			if (chown(full_name, uid, gid) == -1) {
-				bb_perror_msg("line %d: chown failed for %s", linenum, full_name);
-				ret = EXIT_FAILURE;
-				goto loop;
-			}
+			
 			if ((mode != -1) && (chmod(full_name, mode) < 0)){
 				bb_perror_msg("line %d: chmod failed for %s", linenum, full_name);
 				ret = EXIT_FAILURE;
@@ -491,32 +471,30 @@ int main(int argc, char **argv)
 				for (i = start; i < count; i++) {
 					sprintf(full_name_inc, "%s%d", full_name, i);
 					rdev = (major << 8) + minor + (i * increment - start);
-					if (mknod(full_name_inc, mode, rdev) == -1) {
-						bb_perror_msg("line %d: Couldnt create node %s", linenum, full_name_inc);
-						ret = EXIT_FAILURE;
-					}
-					else if (chown(full_name_inc, uid, gid) == -1) {
-						bb_perror_msg("line %d: chown failed for %s", linenum, full_name_inc);
+					// change file owner as we can not work in root here.... 
+					chown(full_name_inc, getuid(), getgid());
+					// if node already done, then skip
+					if ( (stat(full_name_inc, &st)==-1) && (mknod(full_name_inc, mode, rdev) == -1)) {
+						bb_perror_msg("line %d: Couldnt create node %s %d", linenum, full_name_inc);
 						ret = EXIT_FAILURE;
 					}
 					if ((mode != -1) && (chmod(full_name_inc, mode) < 0)){
-						bb_perror_msg("line %d: chmod failed for %s", linenum, full_name_inc);
+				bb_perror_msg("line %d: chmod1 failed for %s %d", linenum, full_name_inc, mode);
 						ret = EXIT_FAILURE;
 					}
 				}
 				free(full_name_inc);
 			} else {
 				rdev = (major << 8) + minor;
-				if (mknod(full_name, mode, rdev) == -1) {
-					bb_perror_msg("line %d: Couldnt create node %s", linenum, full_name);
-					ret = EXIT_FAILURE;
-				}
-				else if (chown(full_name, uid, gid) == -1) {
-					bb_perror_msg("line %d: chown failed for %s", linenum, full_name);
+				// change file owner as we can not work in root here.... 
+				chown(full_name, getuid(), getgid()); 
+				// if node already done, then skip
+				if ( (stat(full_name, &st)==-1) && (mknod(full_name, mode, rdev) == -1)) {
+					bb_perror_msg("line %d: Couldnt create node %s %d", linenum, full_name);
 					ret = EXIT_FAILURE;
 				}
 				if ((mode != -1) && (chmod(full_name, mode) < 0)){
-					bb_perror_msg("line %d: chmod failed for %s", linenum, full_name);
+				bb_perror_msg("line %d: chmod2 failed for %s %d", linenum, full_name, mode);
 					ret = EXIT_FAILURE;
 				}
 			}
@@ -525,9 +503,96 @@ loop:
 		free(line);
 		free(full_name);
 	}
-	fclose(table);
 
-	system("/bin/sync");
+	rewind(table);
+
+	while ((line = bb_get_chomped_line_from_file(table))) {
+		char type;
+		unsigned int mode = 0755;
+		unsigned int major = 0;
+		unsigned int minor = 0;
+		unsigned int count = 0;
+		unsigned int increment = 0;
+		unsigned int start = 0;
+		char name[41];
+		char user[41];
+		char group[41];
+		char *full_name;
+		uid_t uid;
+		gid_t gid;
+
+		linenum++;
 
+		if ((2 > sscanf(line, "%40s %c %o %40s %40s %u %u %u %u %u", name,
+						&type, &mode, user, group, &major,
+						&minor, &start, &increment, &count)) ||
+				((major | minor | start | count | increment) > 255))
+		{
+			if (*line=='\0' || *line=='#' || isspace(*line))
+				continue;
+			bb_error_msg("line %d invalid: '%s'\n", linenum, line);
+			ret = EXIT_FAILURE;
+			continue;
+		}
+		
+		if (name[0] == '#') {
+			continue;
+		}
+		if (group) {
+			gid = get_ug_id(group, my_getgrnam);
+		} else {
+			gid = getgid();
+		}
+		if (user) {
+			uid = get_ug_id(user, my_getpwnam);
+		} else {
+			uid = getuid();
+		}
+		full_name = concat_path_file(rootdir, name);
+
+		if (type == 'd') {
+			if (chown(full_name, uid, gid) == -1) {
+				bb_perror_msg("line %d: chown failed for %s", linenum, full_name);
+				ret = EXIT_FAILURE;
+				goto loop1;
+			}
+		} else if (type == 'f') {
+			if (chown(full_name, uid, gid) == -1) {
+				bb_perror_msg("line %d: chown failed for %s", linenum, full_name);
+				ret = EXIT_FAILURE;
+				goto loop1;
+			}
+		} else
+		{
+			dev_t rdev;
+			if (count > 0) {
+				int i;
+				char *full_name_inc;
+
+				full_name_inc = xmalloc(strlen(full_name) + 4);
+				for (i = start; i < count; i++) {
+					sprintf(full_name_inc, "%s%d", full_name, i);
+					rdev = (major << 8) + minor + (i * increment - start);
+					if (chown(full_name_inc, uid, gid) == -1) {
+						bb_perror_msg("line %d: chown failed for %s", linenum, full_name_inc);
+						ret = EXIT_FAILURE;
+					}
+				}
+				free(full_name_inc);
+			} else {
+				rdev = (major << 8) + minor;
+				if (chown(full_name, uid, gid) == -1) {
+				bb_perror_msg("line %d: chown failed for %s", linenum, full_name);
+					ret = EXIT_FAILURE;
+				}
+			}
+		}
+loop1:
+		free(line);
+		free(full_name);
+	}
+	fclose(table);
+	
+	
 	return 0;
 }
