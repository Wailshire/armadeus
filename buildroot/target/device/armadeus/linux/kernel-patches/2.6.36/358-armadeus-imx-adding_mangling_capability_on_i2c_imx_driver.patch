Index: linux-2.6.36/drivers/i2c/busses/i2c-imx.c
===================================================================
--- linux-2.6.36.orig/drivers/i2c/busses/i2c-imx.c	2010-12-10 17:19:43.000000000 +0100
+++ linux-2.6.36/drivers/i2c/busses/i2c-imx.c	2010-12-13 11:09:03.000000000 +0100
@@ -304,12 +304,15 @@
 		__func__, msgs->addr << 1);
 
 	/* write slave address */
-	writeb(msgs->addr << 1, i2c_imx->base + IMX_I2C_I2DR);
+	if (msgs->flags & I2C_M_REV_DIR_ADDR)
+		writeb((msgs->addr << 1) | 0x01, i2c_imx->base + IMX_I2C_I2DR);
+	else
+		writeb((msgs->addr << 1), i2c_imx->base + IMX_I2C_I2DR);
 	result = i2c_imx_trx_complete(i2c_imx);
 	if (result)
 		return result;
 	result = i2c_imx_acked(i2c_imx);
-	if (result)
+	if ( (result != 0) && ((msgs[0].flags & I2C_M_IGNORE_NAK) == 0))
 		return result;
 	dev_dbg(&i2c_imx->adapter.dev, "<%s> write data\n", __func__);
 
@@ -323,7 +326,7 @@
 		if (result)
 			return result;
 		result = i2c_imx_acked(i2c_imx);
-		if (result)
+		if ( (result != 0) && ((msgs[i].flags & I2C_M_IGNORE_NAK) == 0))
 			return result;
 	}
 	return 0;
@@ -339,12 +342,15 @@
 		__func__, (msgs->addr << 1) | 0x01);
 
 	/* write slave address */
-	writeb((msgs->addr << 1) | 0x01, i2c_imx->base + IMX_I2C_I2DR);
+	if (msgs->flags & I2C_M_REV_DIR_ADDR)
+		writeb((msgs->addr << 1), i2c_imx->base + IMX_I2C_I2DR);
+	else
+		writeb((msgs->addr << 1) | 0x01, i2c_imx->base + IMX_I2C_I2DR);
 	result = i2c_imx_trx_complete(i2c_imx);
 	if (result)
 		return result;
 	result = i2c_imx_acked(i2c_imx);
-	if (result)
+	if ( (result != 0) && ((msgs[0].flags & I2C_M_IGNORE_NAK) == 0))
 		return result;
 
 	dev_dbg(&i2c_imx->adapter.dev, "<%s> setup bus\n", __func__);
@@ -354,6 +360,7 @@
 	temp &= ~I2CR_MTX;
 	if (msgs->len - 1)
 		temp &= ~I2CR_TXAK;
+	if (msgs->flags & I2C_M_NO_RD_ACK) temp |= I2CR_TXAK;
 	writeb(temp, i2c_imx->base + IMX_I2C_I2CR);
 	readb(i2c_imx->base + IMX_I2C_I2DR); /* dummy read */
 
@@ -371,6 +378,7 @@
 				"<%s> clear MSTA\n", __func__);
 			temp = readb(i2c_imx->base + IMX_I2C_I2CR);
 			temp &= ~(I2CR_MSTA | I2CR_MTX);
+			if (msgs->flags & I2C_M_NO_RD_ACK) temp |= I2CR_TXAK;
 			writeb(temp, i2c_imx->base + IMX_I2C_I2CR);
 			i2c_imx_bus_busy(i2c_imx, 0);
 			i2c_imx->stopped = 1;
@@ -405,7 +413,7 @@
 
 	/* read/write data */
 	for (i = 0; i < num; i++) {
-		if (i) {
+		if (i && ((msgs[i].flags & I2C_M_NOSTART)==0)) {
 			dev_dbg(&i2c_imx->adapter.dev,
 				"<%s> repeated start\n", __func__);
 			temp = readb(i2c_imx->base + IMX_I2C_I2CR);
