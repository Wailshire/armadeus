--- linux-org/arch/arm/mach-imx/include/mach/hardware.h	2006-10-01 14:28:50.000000000 +0200
+++ linux-imx/arch/arm/mach-imx/include/mach/hardware.h	2006-10-01 14:30:04.000000000 +0200
@@ -24,6 +24,8 @@
 #include "imx-regs.h"
 
 #ifndef __ASSEMBLY__
+# define __REG8(x)	(*((volatile u8 *)IO_ADDRESS(x)))
+
 # define __REG(x)	(*((volatile u32 *)IO_ADDRESS(x)))
 
 # define __REG2(x,y)        (*(volatile u32 *)((u32)&__REG(x) + (y)))
--- linux-org/arch/arm/mach-imx/include/mach/imx-regs.h	2006-09-20 05:42:06.000000000 +0200
+++ linux-imx/arch/arm/mach-imx/include/mach/imx-regs.h	2006-10-01 14:30:04.000000000 +0200
@@ -186,7 +186,7 @@
 #define PB19_AF_SSI_TXCLK    ( GPIO_PORTB | GPIO_AF | 19 )
 #define PB20_PF_USBD_AFE     ( GPIO_PORTB | GPIO_PF | 20 )
 #define PB21_PF_USBD_OE      ( GPIO_PORTB | GPIO_PF | 21 )
-#define PB22_PFUSBD_RCV      ( GPIO_PORTB | GPIO_PF | 22 )
+#define PB22_PF_USBD_RCV     ( GPIO_PORTB | GPIO_PF | 22 )
 #define PB23_PF_USBD_SUSPND  ( GPIO_PORTB | GPIO_PF | 23 )
 #define PB24_PF_USBD_VP      ( GPIO_PORTB | GPIO_PF | 24 )
 #define PB25_PF_USBD_VM      ( GPIO_PORTB | GPIO_PF | 25 )
@@ -591,4 +591,146 @@
 #define  UTS_RXFULL 	 (1<<3)	 /* RxFIFO full */
 #define  UTS_SOFTRST	 (1<<0)	 /* Software reset */
 
+/*
+ * CSI register
+ */
+#define  CSICR1        __REG(0x00 + IMX_CSI_BASE)
+#define  CSICR2        __REG(0x04 + IMX_CSI_BASE)
+#define  CSISR         __REG(0x08 + IMX_CSI_BASE)
+#define  CSISTATR      __REG(0x0C + IMX_CSI_BASE)
+#define  CSIRXR        __REG(0x10 + IMX_CSI_BASE)
+
+/* CSI bit fields */
+#define CSICR1_RXOR_INTEN      (1<<24)
+#define CSICR1_RXFF_INTEN      (1<<18)
+#define CSICR1_RXFF_LEVEL(x)   ((x & 0x3)<<19)
+#define CSICR1_SOF_POL         (1<<17)
+#define CSICR1_SOF_INTEN       (1<<16)
+#define CSICR1_MCLKDIV(x)      ((x & 0xf)<<12)
+#define CSICR1_MCLKEN          (1<<9)
+#define CSICR1_FCC             (1<<8)
+#define CSICR1_BIG_ENDIAN      (1<<7)
+#define CSICR1_CLR_STATFIFO    (1<<6)
+#define CSICR1_CLR_RXFIFO      (1<<5)
+#define CSICR1_GCLK_MODE       (1<<4)
+#define CSICR1_INV_DATA        (1<<3)
+#define CSICR1_REDGE           (1<<1)
+#define CSICR1_ENABLE          (1)
+
+/*
+ * USB register
+ */
+#define  USB_FRAME         __REG(0x00 + IMX_USBD_BASE)             /* USB frame */
+#define  USB_SPEC          __REG(0x04 + IMX_USBD_BASE)             /* USB Spec */
+#define  USB_STAT          __REG(0x08 + IMX_USBD_BASE)             /* USB Status */
+#define  USB_CTRL          __REG(0x0C + IMX_USBD_BASE)             /* USB Control */
+#define  USB_DADR          __REG(0x10 + IMX_USBD_BASE)             /* USB Descriptor RAM address */
+#define  USB_DDAT          __REG(0x14 + IMX_USBD_BASE)             /* USB Descriptor RAM/Endpoint buffer data */
+#define  USB_INTR          __REG(0x18 + IMX_USBD_BASE)             /* USB interrupt */
+#define  USB_MASK          __REG(0x1C + IMX_USBD_BASE)             /* USB Mask */
+#define  USB_ENAB          __REG(0x24 + IMX_USBD_BASE)             /* USB Enable */
+#define  USB_EP_STAT(x)    __REG(0x30 + IMX_USBD_BASE + (x*0x30))  /* USB status/control */
+#define  USB_EP_INTR(x)    __REG(0x34 + IMX_USBD_BASE + (x*0x30))  /* USB interrupt */
+#define  USB_EP_MASK(x)    __REG(0x38 + IMX_USBD_BASE + (x*0x30))  /* USB mask */
+#define  USB_EP_FDAT(x)    __REG(0x3C + IMX_USBD_BASE + (x*0x30))  /* USB FIFO data */
+#define  USB_EP_FDAT0(x)   __REG8(0x3C + IMX_USBD_BASE + (x*0x30)) /* USB FIFO data */
+#define  USB_EP_FDAT1(x)   __REG8(0x3D + IMX_USBD_BASE + (x*0x30)) /* USB FIFO data */
+#define  USB_EP_FDAT2(x)   __REG8(0x3E + IMX_USBD_BASE + (x*0x30)) /* USB FIFO data */
+#define  USB_EP_FDAT3(x)   __REG8(0x3F + IMX_USBD_BASE + (x*0x30)) /* USB FIFO data */
+#define  USB_EP_FSTAT(x)   __REG(0x40 + IMX_USBD_BASE + (x*0x30))  /* USB FIFO status */
+#define  USB_EP_FCTRL(x)   __REG(0x44 + IMX_USBD_BASE + (x*0x30))  /* USB FIFO control */
+#define  USB_EP_LRFP(x)    __REG(0x48 + IMX_USBD_BASE + (x*0x30))  /* USB last read frame pointer */
+#define  USB_EP_LWFP(x)    __REG(0x4C + IMX_USBD_BASE + (x*0x30))  /* USB last write frame pointer */
+#define  USB_EP_FALRM(x)   __REG(0x50 + IMX_USBD_BASE + (x*0x30))  /* USB FIFO alarm */
+#define  USB_EP_FRDP(x)    __REG(0x54 + IMX_USBD_BASE + (x*0x30))  /* USB FIFO read pointer */
+#define  USB_EP_FWRP(x)    __REG(0x58 + IMX_USBD_BASE + (x*0x30))  /* USB FIFO write pointer */
+
+/* USB Control Register Bit Fields.*/
+#define USB_CMDOVER    (1<<6)			/* UDC status */
+#define USB_CMDERROR   (1<<5)			/* UDC status */
+#define USB_FE_ENA     (1<<3)			/* Enable Font End logic */
+#define USB_UDC_RST    (1<<2)			/* UDC reset */
+#define USB_AFE_ENA    (1<<1)			/* Analog Font end enable */
+#define USB_RESUME     (1<<0)			/* UDC resume */
+
+/* USB Descriptor Ram Bit Fields */
+#define USB_CFG            (1<<31)			/* Configuration */
+#define USB_BSY            (1<<30)			/* Busy status */
+#define USB_DADR_DESC      (0x1FF)			/* Descriptor Ram Address */
+#define USB_DDAT_DESC      (0xFF)			/* Descriptor Endpoint Buffer */
+
+/* USB Endpoint Bit fields */
+/* USB Endpoint status bit fields */
+#define USB_FIFO_BCOUNT    (0x7F<<16)		/* Endpoint FIFO byte count */
+#define USB_SIP            (1<<8)			/* Endpoint setup in progress */
+#define USB_DIR            (1<<7)			/* Endpoint transfer direction */
+#define USB_MAX            (3<<5)			/* Endpoint Max packet size */
+#define USB_TYP            (3<<3)			/* Endpoint type */
+#define USB_ZLPS           (1<<2)			/* Send zero length packet */
+#define USB_FLUSH          (1<<1)			/* Endpoint FIFO Flush */
+#define USB_STALL          (1<<0)			/* Force stall */
+/* USB Endpoint FIFO status bit fields */
+#define USB_FRAME_STAT     (0xF<<24)		/* Frame status bit [0-3] */
+#define USB_ERR            (1<<22)			/* FIFO error */
+#define USB_UF             (1<<21)			/* FIFO underflow */
+#define USB_OF             (1<<20)			/* FIFO overflow */
+#define USB_FR             (1<<19)			/* FIFO frame ready */
+#define USB_FULL           (1<<18)			/* FIFO full */
+#define USB_ALRM           (1<<17)			/* FIFO alarm */
+#define USB_EMPTY          (1<<16)			/* FIFO empty */
+/* USB Endpoint FIFO control bit fields */
+#define USB_WFR            (1<<29)			/* Write frame end */
+/* USB Endpoint FIFO interrupt bit fields */
+#define USB_FIFO_FULL      (1<<8)			/* fifo full */
+#define USB_FIFO_EMPTY     (1<<7)			/* fifo empty */
+#define USB_FIFO_ERROR     (1<<6)			/* fifo error */
+#define USB_FIFO_HIGH      (1<<5)			/* fifo high */
+#define USB_FIFO_LOW       (1<<4)			/* fifo low */
+#define USB_MDEVREQ        (1<<3)			/* multi Device request */
+#define USB_EOT            (1<<2)			/* fifo end of transfer */
+#define USB_DEVREQ         (1<<1)			/* Device request */
+#define USB_EOF            (1<<0)			/* fifo end of frame */
+
+/* USB Interrupt Bit fields */
+#define USB_WAKEUP         (1<<31)			/* Wake up Interrupt */
+#define USB_MSOF           (1<<7)			/* Missed Start of Frame */
+#define USB_SOF            (1<<6)			/* Start of Frame */
+#define USB_RESET_STOP     (1<<5)			/* Reset Signaling stop */
+#define USB_RESET_START    (1<<4)			/* Reset Signaling start */
+#define USB_RES            (1<<3)			/* Suspend to resume */
+#define USB_SUSP           (1<<2)			/* Active to suspend */
+#define USB_FRAME_MATCH    (1<<1)			/* Frame matched */
+#define USB_CFG_CHG        (1<<0)			/* Configuration change occurred */
+
+/* USB Enable Register Bit Fields.*/
+#define USB_RST            (1<<31)			/* Reset USB modules */
+#define USB_ENA            (1<<30)			/* Enable USB modules*/
+#define USB_SUSPEND        (1<<29)			/* Suspend USB modules */
+#define USB_ENDIAN         (1<<28)			/* Endian of USB modules */
+#define USB_POWER          (1<<0)			/* Power mode of USB modules */
+
+/* 
+ * SSI register
+ */
+#define     SSI_STX            	__REG(IMX_SSI_BASE)
+#define     SSI_SRX            	__REG(IMX_SSI_BASE + 0x4)
+#define     SSI_SCSR           	__REG(IMX_SSI_BASE + 0x8)	
+#define     SSI_STCR           	__REG(IMX_SSI_BASE + 0xC) 
+#define     SSI_SRCR           	__REG(IMX_SSI_BASE + 0x10) 
+#define     SSI_STCCR          	__REG(IMX_SSI_BASE + 0x14) 
+#define     SSI_SRCCR          	__REG(IMX_SSI_BASE + 0x18) 
+#define     SSI_STSR           	__REG(IMX_SSI_BASE + 0x1C) 
+#define     SSI_SFCSR          	__REG(IMX_SSI_BASE + 0x20) 
+#define     SSI_STR            	__REG(IMX_SSI_BASE + 0x24) 
+#define     SSI_SOR            	__REG(IMX_SSI_BASE + 0x28) 
+
+#define SPI1_RXDATA        __REG(IMX_SPI1_BASE + 0x0) 
+#define SPI1_TXDATA        __REG(IMX_SPI1_BASE + 0x4) 
+#define SPI1_CONTROL       __REG(IMX_SPI1_BASE + 0x8) 
+#define SPI1_INT           __REG(IMX_SPI1_BASE + 0xC) 
+#define SPI1_TEST          __REG(IMX_SPI1_BASE + 0x10) 
+#define SPI1_PERIOD        __REG(IMX_SPI1_BASE + 0x14) 
+#define SPI1_DMA           __REG(IMX_SPI1_BASE + 0x18) 
+#define SPI1_RESET         __REG(IMX_SPI1_BASE + 0x1C) 
+
 #endif				// _IMX_REGS_H
