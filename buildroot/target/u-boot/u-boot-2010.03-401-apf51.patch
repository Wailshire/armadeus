diff -purN u-boot-2010.03-ref/board/armadeus/apf51/apf51.c u-boot-2010.03/board/armadeus/apf51/apf51.c
--- u-boot-2010.03-ref/board/armadeus/apf51/apf51.c	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2010.03/board/armadeus/apf51/apf51.c	2010-11-10 00:45:59.000000000 +0100
@@ -0,0 +1,988 @@
+/*
+ * (C) Copyright 2010 Eric Jarrige, Armadeus Project 
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+#include <command.h>
+#include <asm/io.h>
+#include <asm/arch/imx-regs.h>
+#include <asm/arch/asm-offsets.h>
+#include <asm/arch/mx51_pins.h>
+#include <asm/arch/iomux.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/errno.h>
+#include <i2c.h>
+//#include <asm/arch/imx_spi.h>
+//#include <asm/arch/gpio.h>
+#include <asm/arch/mxc_nand.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+static u32 system_rev;
+unsigned long boot_verb = 0;
+
+u32 get_board_rev(void)
+{
+	return system_rev;
+}
+
+int dram_init(void)
+{
+#if ( CONFIG_SYS_NR_DRAM_BANKS > 0 )
+	gd->bd->bi_dram[0].start = CONFIG_SYS_SDRAM_1_BASE;
+	gd->bd->bi_dram[0].size = CONFIG_SYS_SDRAM_1_SIZE;
+#endif
+#if ( CONFIG_SYS_NR_DRAM_BANKS > 1 )
+	gd->bd->bi_dram[1].start = CONFIG_SYS_SDRAM_2_BASE;
+	gd->bd->bi_dram[1].size = CONFIG_SYS_SDRAM_2_SIZE;
+#endif
+	return 0;
+}
+
+void setup_usb(void)
+{
+	/*
+	 * Configure iomux for USB interfaces
+	 */
+#define USB_PAD_CFG		(PAD_CTL_HYS_NONE | PAD_CTL_PKE_ENABLE |	\
+				 PAD_CTL_PUE_KEEPER | PAD_CTL_100K_PU |		\
+				 PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST)
+	/*
+	 * usboh1
+	 */
+	mxc_request_iomux(MX51_PIN_USBH1_CLK, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_DIR, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_STP, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_NXT, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_DATA0, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_DATA1, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_DATA2, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_DATA3, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_DATA4, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_DATA5, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_DATA6, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_USBH1_DATA7, IOMUX_CONFIG_ALT0);
+
+	mxc_iomux_set_pad(MX51_PIN_USBH1_CLK, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_DIR, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_STP, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_NXT, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_DATA0, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_DATA1, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_DATA2, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_DATA3, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_DATA4, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_DATA5, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_DATA6, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_USBH1_DATA7, USB_PAD_CFG);
+	/*
+	 * usboh2
+	 */
+	mxc_request_iomux(MX51_PIN_EIM_D16, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_D17, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_D18, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_D19, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_D20, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_D21, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_D22, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_D23, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_A24, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_A25, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_A26, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_EIM_A27, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_GPIO1_8, IOMUX_CONFIG_ALT1);
+	mxc_request_iomux(MX51_PIN_GPIO1_9, IOMUX_CONFIG_ALT1);
+
+	mxc_iomux_set_pad(MX51_PIN_EIM_D16, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D17, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D18, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D19, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D20, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D21, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D22, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D23, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_A24, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_A25, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_A26, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_A27, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_GPIO1_8, USB_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_GPIO1_9, USB_PAD_CFG);
+}
+
+void setup_uart(void)
+{
+	/*
+	 * Configure iomux for UART interfaces
+	 */
+#define UART_PAD_CFG		(PAD_CTL_HYS_NONE | PAD_CTL_PKE_ENABLE |	\
+				 PAD_CTL_PUE_PULL | PAD_CTL_100K_PU |		\
+				 PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST)
+	/*
+	 * uart1
+	 */
+	mxc_request_iomux(MX51_PIN_UART1_RTS, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_UART1_CTS, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_UART1_RXD, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_UART1_TXD, IOMUX_CONFIG_ALT0);
+
+	mxc_iomux_set_pad(MX51_PIN_UART1_RTS, UART_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_UART1_CTS, UART_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_UART1_RXD, UART_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_UART1_TXD, UART_PAD_CFG);
+
+	/*
+	 * uart2
+	 */
+	mxc_request_iomux(MX51_PIN_EIM_D25, IOMUX_CONFIG_ALT4);
+	mxc_request_iomux(MX51_PIN_EIM_D26, IOMUX_CONFIG_ALT4);
+	mxc_request_iomux(MX51_PIN_UART2_RXD, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_UART2_TXD, IOMUX_CONFIG_ALT0);
+
+	mxc_iomux_set_pad(MX51_PIN_EIM_D25, UART_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D26, UART_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_UART2_RXD, UART_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_UART2_TXD, UART_PAD_CFG);
+
+	mxc_iomux_set_input(MUX_IN_UART2_IPP_UART_RXD_MUX_SELECT_INPUT,INPUT_CTL_PATH2);
+	mxc_iomux_set_input(MUX_IN_UART2_IPP_UART_RTS_B_SELECT_INPUT,INPUT_CTL_PATH3);
+	/*
+	 * uart3
+	 */
+	mxc_request_iomux(MX51_PIN_UART3_RXD, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_UART3_TXD, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_D27, IOMUX_CONFIG_ALT3);
+	mxc_request_iomux(MX51_PIN_EIM_D24, IOMUX_CONFIG_ALT3);
+
+	mxc_iomux_set_pad(MX51_PIN_UART3_RXD, UART_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_UART3_TXD, UART_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D27, UART_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D24, UART_PAD_CFG);
+
+	mxc_iomux_set_input(MUX_IN_UART3_IPP_UART_RTS_B_SELECT_INPUT,INPUT_CTL_PATH3);
+	mxc_iomux_set_input(MUX_IN_UART3_IPP_UART_RXD_MUX_SELECT_INPUT,INPUT_CTL_PATH4);
+}
+
+void setup_audio(void)
+{
+	/*
+	 * Configure iomux for audio interfaces
+	 */
+#define AUD_PAD_CFG		(PAD_CTL_HYS_NONE | PAD_CTL_PKE_ENABLE |	\
+				 PAD_CTL_PUE_KEEPER | PAD_CTL_100K_PU |		\
+				 PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST)
+	/*
+	 * audmux3
+	 */
+	mxc_request_iomux(MX51_PIN_AUD3_BB_TXD, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_AUD3_BB_RXD, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_AUD3_BB_CK, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_AUD3_BB_FS, IOMUX_CONFIG_ALT0);
+
+	mxc_iomux_set_pad(MX51_PIN_AUD3_BB_TXD, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_AUD3_BB_RXD, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_AUD3_BB_CK, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_AUD3_BB_FS, AUD_PAD_CFG);
+	/*
+	 * audmux5
+	 */
+	mxc_request_iomux(MX51_PIN_EIM_EB2, IOMUX_CONFIG_ALT6);
+	mxc_request_iomux(MX51_PIN_EIM_EB3, IOMUX_CONFIG_ALT6);
+	mxc_request_iomux(MX51_PIN_EIM_CS2, IOMUX_CONFIG_ALT6);
+	mxc_request_iomux(MX51_PIN_EIM_CS3, IOMUX_CONFIG_ALT6);
+	mxc_request_iomux(MX51_PIN_EIM_CS4, IOMUX_CONFIG_ALT6);
+	mxc_request_iomux(MX51_PIN_EIM_CS5, IOMUX_CONFIG_ALT6);
+
+	mxc_iomux_set_pad(MX51_PIN_EIM_EB2, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_EB3, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_CS2, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_CS3, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_CS4, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_CS5, AUD_PAD_CFG);
+
+	mxc_iomux_set_input(MUX_IN_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT,INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT,INPUT_CTL_PATH1);
+	/*
+	 * audmux6
+	 */
+	mxc_request_iomux(MX51_PIN_EIM_D28, IOMUX_CONFIG_ALT5);
+	mxc_request_iomux(MX51_PIN_EIM_D29, IOMUX_CONFIG_ALT5);
+	mxc_request_iomux(MX51_PIN_EIM_D30, IOMUX_CONFIG_ALT5);
+	mxc_request_iomux(MX51_PIN_EIM_D31, IOMUX_CONFIG_ALT5);
+
+	mxc_iomux_set_pad(MX51_PIN_EIM_D28, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D29, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D30, AUD_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_EIM_D31, AUD_PAD_CFG);
+}
+
+void setup_csi(void)
+{
+	/*
+	 * Configure iomux for CSI interfaces
+	 */
+#define CSI_PAD_CFG		(PAD_CTL_HYS_NONE | PAD_CTL_PKE_ENABLE |	\
+				 PAD_CTL_PUE_KEEPER | PAD_CTL_100K_PU |		\
+				 PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST)
+	/*
+	 * csi1
+	 */
+	mxc_request_iomux(MX51_PIN_CSI1_D8 , IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D9 , IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D10, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D11, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D12, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D13, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D14, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D15, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D16, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D17, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D18, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_D19, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_VSYNC, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_HSYNC, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_PIXCLK, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSI1_MCLK, IOMUX_CONFIG_ALT0);
+
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D8 , CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D9 , CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D10, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D11, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D12, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D13, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D14, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D15, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D16, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D17, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D18, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_D19, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_VSYNC, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_HSYNC, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_PIXCLK, CSI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_CSI1_MCLK, CSI_PAD_CFG);
+}
+
+void setup_eim(void)
+{
+	/*
+	 * Configure iomux for EIM interface
+	 */
+	mxc_request_iomux(MX51_PIN_EIM_DA0, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA1, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA2, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA3, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA4, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA5, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA6, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA7, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA8, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA9, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA10, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA11, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA12, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA13, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA14, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DA15, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_EB0, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_EB1, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_OE , IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_CS0, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_CS1, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_DTACK, IOMUX_CONFIG_ALT0);
+// missing in DS	mxc_request_iomux(MX51_PIN_EIM_WAIT, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_EIM_LBA, IOMUX_CONFIG_ALT0);
+// missing in DS	mxc_request_iomux(MX51_PIN_EIM_BCLK, IOMUX_CONFIG_ALT0);
+// missing in DS	mxc_request_iomux(MX51_PIN_EIM_RW , IOMUX_CONFIG_ALT0);
+
+}
+
+void setup_keypad(void)
+{
+	/*
+	 * Configure iomux for KEYPAD interfaces
+	 */
+	mxc_request_iomux(MX51_PIN_KEY_ROW0, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_KEY_ROW1, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_KEY_ROW2, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_KEY_ROW3, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_KEY_COL0, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_KEY_COL1, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_KEY_COL2, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_KEY_COL3, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_KEY_COL4, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_KEY_COL5, IOMUX_CONFIG_ALT0);
+}
+
+void setup_display(void)
+{
+	/*
+	 * Configure iomux for display 1 interface
+	 */
+	mxc_request_iomux(MX51_PIN_DI1_D1_CS, IOMUX_CONFIG_ALT0);
+// missing in DS	mxc_request_iomux(MX51_PIN_DI1_DISP_CLK, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DI1_PIN2, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DI1_PIN3, IOMUX_CONFIG_ALT0);
+// missing in DS	mxc_request_iomux(MX51_PIN_DI1_PIN15, IOMUX_CONFIG_ALT0);
+
+	mxc_request_iomux(MX51_PIN_DISP1_DAT0, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT1, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT2, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT3, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT4, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT5, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT6, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT7, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT8, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT9, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT10, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT11, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT12, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT13, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT14, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT15, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT16, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT17, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT18, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT19, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT20, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT21, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT22, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_DISP1_DAT23, IOMUX_CONFIG_ALT0);
+}
+
+void setup_nfc(void)
+{
+	/*
+	 * Configure iomux for NFC interface
+	 */
+	mxc_request_iomux(MX51_PIN_NANDF_WE_B, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_RE_B, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_ALE , IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_CLE , IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_WP_B, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_RB0 , IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_CS0, IOMUX_CONFIG_ALT0);
+
+	mxc_request_iomux(MX51_PIN_NANDF_D0, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_D1, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_D2, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_D3, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_D4, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_D5, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_D6, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_NANDF_D7, IOMUX_CONFIG_ALT0);
+
+	writel(0, NFC_IPC);
+	NFC_SET_FW(1);
+}
+
+void setup_spi_io(void)
+{
+	/*
+	 * Configure iomux for SPI interface
+	 */
+#define CSPI_PAD_CFG		(PAD_CTL_HYS_NONE | PAD_CTL_PKE_ENABLE |	\
+				 PAD_CTL_PUE_KEEPER | PAD_CTL_100K_PU |		\
+				 PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST)
+	/*
+	 * ECSPI1
+	 */
+	mxc_request_iomux(MX51_PIN_CSPI1_MOSI, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSPI1_MISO, IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSPI1_SS0 , IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSPI1_SS1 , IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSPI1_RDY , IOMUX_CONFIG_ALT0);
+	mxc_request_iomux(MX51_PIN_CSPI1_SCLK, IOMUX_CONFIG_ALT0);
+
+	/*
+	 * ECSPI2
+	 */
+	mxc_request_iomux(MX51_PIN_NANDF_RB1, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_NANDF_RB2, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_NANDF_RB3, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_NANDF_D12, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_NANDF_D13, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_NANDF_D14, IOMUX_CONFIG_ALT2);
+	mxc_request_iomux(MX51_PIN_NANDF_D15, IOMUX_CONFIG_ALT2);
+
+	mxc_iomux_set_pad(MX51_PIN_NANDF_RB1, CSPI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_NANDF_RB2, CSPI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_NANDF_RB3, CSPI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_NANDF_D12, CSPI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_NANDF_D13, CSPI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_NANDF_D14, CSPI_PAD_CFG);
+	mxc_iomux_set_pad(MX51_PIN_NANDF_D15, CSPI_PAD_CFG);
+
+	mxc_iomux_set_input(MUX_IN_CSPI_IPP_IND_SS_B_1_SELECT_INPUT,INPUT_CTL_PATH1);
+}
+
+#define GPIO_DR		0x00	/* Data Register */
+#define GPIO_GDIR	0x04	/* GPIO direction */
+#define GPIO_PSR	0x08	/* Pad Status Reg */
+#define GPIO_ICR1	0x0c	/* Interrupt Configuration Reg 1 */
+#define GPIO_ICR2	0x10	/* Interrupt Configuration Reg 2 */
+#define GPIO_IMR	0x14	/* Interrupt Mask Reg */
+#define GPIO_ISR	0x18	/* Interrupt Status Reg */
+#define GPIO_EDR	0x1c	/* Edge Detect Reg */
+
+#define PORT_BADDR(n)	(GPIO1_BASE_ADDR + (n) * 0x4000)
+
+void imx_gpio_pin_cfg_dir(unsigned int pin, int dir)
+{
+	u32 gpio_num = IOMUX_TO_GPIO(pin);
+	u32 gpio_off = GPIO_TO_INDEX(gpio_num);
+	u32 baddr = PORT_BADDR(GPIO_TO_PORT(gpio_num));
+
+	if (dir)
+		__REG(baddr + GPIO_GDIR) |= (1 << gpio_off);
+	else
+		__REG(baddr + GPIO_GDIR) &= ~(1 << gpio_off);
+}
+
+void imx_gpio_pin_set(unsigned int pin, int value)
+{
+	u32 gpio_num = IOMUX_TO_GPIO(pin);
+	u32 gpio_off = GPIO_TO_INDEX(gpio_num);
+	u32 baddr = PORT_BADDR(GPIO_TO_PORT(gpio_num));
+
+	if (value)
+		__REG(baddr + GPIO_DR) |= (1 << gpio_off);
+	else
+		__REG(baddr + GPIO_DR) &= ~(1 << gpio_off);
+}
+
+void setup_misc(void)
+{
+	/*
+	 * Configure iomux for misc interfaces
+	 */
+#define GPIO_PAD_CFG		(PAD_CTL_HYS_NONE | PAD_CTL_PKE_ENABLE |	\
+				 PAD_CTL_PUE_KEEPER | PAD_CTL_100K_PU |		\
+				 PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST)
+
+	/* pwm 1 & 2 */
+	mxc_request_iomux(MX51_PIN_GPIO1_2, IOMUX_CONFIG_ALT1);
+	mxc_iomux_set_pad(MX51_PIN_GPIO1_2, GPIO_PAD_CFG);
+
+	mxc_request_iomux(MX51_PIN_GPIO1_3, IOMUX_CONFIG_ALT1);
+	mxc_iomux_set_pad(MX51_PIN_GPIO1_3, GPIO_PAD_CFG);
+
+	/* touch detect# */
+	mxc_request_iomux(MX51_PIN_GPIO1_4, IOMUX_CONFIG_ALT0);
+	mxc_iomux_set_pad(MX51_PIN_GPIO1_4, GPIO_PAD_CFG);
+
+	/* clko */
+	mxc_request_iomux(MX51_PIN_GPIO1_5, IOMUX_CONFIG_ALT5);
+	mxc_iomux_set_pad(MX51_PIN_GPIO1_5, GPIO_PAD_CFG);
+
+	/* touch eoc# */
+	mxc_request_iomux(MX51_PIN_GPIO1_6, IOMUX_CONFIG_ALT0);
+	mxc_iomux_set_pad(MX51_PIN_GPIO1_6, GPIO_PAD_CFG);
+
+	/* PMIC IRQ */
+	mxc_request_iomux(MX51_PIN_GPIO1_7, IOMUX_CONFIG_ALT0);
+
+	/* FPGA PWR */
+	mxc_request_iomux(MX51_PIN_DI1_D0_CS, IOMUX_CONFIG_ALT4);
+	mxc_iomux_set_pad(MX51_PIN_DI1_D0_CS, GPIO_PAD_CFG);
+
+	/* FEC PHY RST# */
+	mxc_request_iomux(MX51_PIN_DI1_PIN11, IOMUX_CONFIG_ALT4);
+	mxc_iomux_set_pad(MX51_PIN_DI1_PIN11, GPIO_PAD_CFG);
+	/* Ethernet PHY Reset in */
+	imx_gpio_pin_set(CONFIG_SYS_PHY_RESET_GPIO,0);	/* MX51_PIN_DI1_PIN11 */
+	imx_gpio_pin_cfg_dir(CONFIG_SYS_PHY_RESET_GPIO, 1);
+
+	/* USBHOST RST# */
+	mxc_request_iomux(MX51_PIN_DI1_PIN12, IOMUX_CONFIG_ALT4);
+	mxc_iomux_set_pad(MX51_PIN_DI1_PIN12, GPIO_PAD_CFG);
+
+	/* PMIC SLEEP# */
+	mxc_request_iomux(MX51_PIN_DISPB2_SER_CLK, IOMUX_CONFIG_ALT4);
+	mxc_iomux_set_pad(MX51_PIN_DISPB2_SER_CLK, GPIO_PAD_CFG);
+
+	/* FPGA SUSPEND */
+	mxc_request_iomux(MX51_PIN_DISPB2_SER_DIO, IOMUX_CONFIG_ALT4);
+	mxc_iomux_set_pad(MX51_PIN_DISPB2_SER_DIO, GPIO_PAD_CFG);
+
+	/* PMIC OFF# */
+	mxc_request_iomux(MX51_PIN_DISPB2_SER_RS, IOMUX_CONFIG_ALT4);
+	mxc_iomux_set_pad(MX51_PIN_DISPB2_SER_RS, GPIO_PAD_CFG);
+
+	/* FPGA PROG */
+	mxc_request_iomux(MX51_PIN_CSI2_D12, IOMUX_CONFIG_ALT3);
+	mxc_iomux_set_pad(MX51_PIN_CSI2_D12, GPIO_PAD_CFG);
+
+	/* FPGA DONE */
+	mxc_request_iomux(MX51_PIN_CSI2_D13, IOMUX_CONFIG_ALT3);
+	mxc_iomux_set_pad(MX51_PIN_CSI2_D13, GPIO_PAD_CFG);
+
+	/* FPGA INIT# */
+	mxc_request_iomux(MX51_PIN_CSI2_D18, IOMUX_CONFIG_ALT3);
+	mxc_iomux_set_pad(MX51_PIN_CSI2_D18, GPIO_PAD_CFG);
+
+	/* Ethernet PHY Reset out */
+	imx_gpio_pin_set(CONFIG_SYS_PHY_RESET_GPIO,1);
+
+}
+
+
+#ifdef CONFIG_I2C_MXC
+#define I2C_PAD_CFG	(PAD_CTL_SRE_FAST | PAD_CTL_DRV_HIGH | \
+	PAD_CTL_ODE_OPENDRAIN_ENABLE | PAD_CTL_100K_PU | PAD_CTL_HYS_ENABLE)
+static void setup_i2c(unsigned int module_base)
+{
+	/*
+	 * Configure iomux for I2C interfaces
+	 */
+	switch (module_base) {
+	case I2C1_BASE_ADDR:
+		/* SCL */
+		mxc_request_iomux(MX51_PIN_I2C1_CLK, IOMUX_CONFIG_ALT0);
+
+		/* SDA */
+		mxc_request_iomux(MX51_PIN_I2C1_DAT, IOMUX_CONFIG_ALT0);
+		break;
+
+	case I2C2_BASE_ADDR: /* do not use without disabling UART3 first */
+		/* SCL */
+		mxc_request_iomux(MX51_PIN_I2C2_CLK, IOMUX_CONFIG_ALT4);
+
+		/* SDA */
+		mxc_request_iomux(MX51_PIN_I2C2_DAT, IOMUX_CONFIG_ALT4);
+		mxc_iomux_set_input(MUX_IN_I2C2_IPP_SDA_IN_SELECT_INPUT,INPUT_CTL_PATH0);
+		break;
+
+	default:
+		printf("Invalid I2C base: 0x%x\n", module_base);
+		break;
+	}
+}
+#endif
+
+static void setup_fec(void)
+{
+#ifdef CONFIG_FEC_MXC
+#define CFG_FEC_PAD		(PAD_CTL_DRV_MEDIUM | PAD_CTL_PUE_KEEPER | \
+				 PAD_CTL_HYS_ENABLE | PAD_CTL_DRV_VOT_HIGH)
+
+	/* FEC TX_ER muxed with DI_GP3 */
+	mxc_request_iomux(MX51_PIN_DI_GP3, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DI_GP3, CFG_FEC_PAD);
+
+	/* FEC CRS muxed with DI2_PIN4 */
+	mxc_request_iomux(MX51_PIN_DI2_PIN4, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DI2_PIN4, CFG_FEC_PAD);
+
+	/* FEC MDC muxed with DI2_PIN2 */
+	mxc_request_iomux(MX51_PIN_DI2_PIN2, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DI2_PIN2, CFG_FEC_PAD);
+
+	/* FEC MDIO muxed with DI2_PIN3 */
+	mxc_request_iomux(MX51_PIN_DI2_PIN3, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DI2_PIN3, CFG_FEC_PAD);
+
+	/* FEC RDATA[1] muxed with DI2_DISP_CLK */
+	mxc_request_iomux(MX51_PIN_DI2_DISP_CLK, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DI2_DISP_CLK, CFG_FEC_PAD);
+
+	/* FEC RDATA[2] muxed with DI_GP4 */
+	mxc_request_iomux(MX51_PIN_DI_GP4, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DI_GP4, CFG_FEC_PAD);
+
+	/* FEC RDATA[3] muxed with DISP2_DAT0 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT0, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT0, CFG_FEC_PAD);
+
+	/* FEC RX_ER muxed with DISP2_DAT1 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT1, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT1, CFG_FEC_PAD);
+
+	/* FEC TDATA[1] muxed with DISP2_DAT6 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT6, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT6, CFG_FEC_PAD);
+
+	/* FEC TDATA[2] muxed with DISP2_DAT7 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT7, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT7, CFG_FEC_PAD);
+
+	/* FEC TDATA[3] muxed with DISP2_DAT8 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT8, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT8, CFG_FEC_PAD);
+
+	/* FEC TX_EN muxed with DISP2_DAT9 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT9, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT9, CFG_FEC_PAD);
+
+	/* FEC COL muxed with DISP_DATA10 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT10, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT10, CFG_FEC_PAD);
+
+	/* FEC RX_CLK muxed with DISP2_DAT11 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT11, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT11, CFG_FEC_PAD);
+
+	/* FEC RX_DV muxed with DISP2_DAT12 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT12, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT12, CFG_FEC_PAD);
+
+	/* FEC TX_CLK muxed with DISP2_DAT13 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT13, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT13, CFG_FEC_PAD);
+
+	/* FEC RDATA[0] muxed with DISP2_DAT14 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT14, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT14, CFG_FEC_PAD);
+
+	/* FEC TDATA[0] muxed with DISP2_DAT15 */
+	mxc_request_iomux(MX51_PIN_DISP2_DAT15, IOMUX_CONFIG_ALT2);
+	mxc_iomux_set_pad(MX51_PIN_DISP2_DAT15, CFG_FEC_PAD);
+
+	/* FEC signals involved in daisy chain should be mapped to DISP2/DI2 pads */
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_COL_SELECT_INPUT, INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_CRS_SELECT_INPUT, INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_MDI_SELECT_INPUT, INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RDATA_0_SELECT_INPUT, INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RDATA_1_SELECT_INPUT, INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RDATA_2_SELECT_INPUT, INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RDATA_3_SELECT_INPUT, INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RX_CLK_SELECT_INPUT, INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RX_DV_SELECT_INPUT, INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RX_ER_SELECT_INPUT, INPUT_CTL_PATH1);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_TX_CLK_SELECT_INPUT, INPUT_CTL_PATH1);
+
+#endif
+}
+
+#ifdef CONFIG_NET_MULTI
+int board_eth_init(bd_t *bis)
+{
+	int rc = -ENODEV;
+	return rc;
+}
+#endif
+
+#ifdef CONFIG_FSL_MMC
+volatile u32 *esdhc_base_pointer;
+int esdhc_active = CONFIG_DEFAULT_MMC;
+#define SD1_PAD_CFG		(PAD_CTL_DRV_MAX | PAD_CTL_DRV_VOT_HIGH |	\
+				 PAD_CTL_HYS_NONE | PAD_CTL_47K_PU |		\
+				 PAD_CTL_PUE_PULL | PAD_CTL_PKE_ENABLE |	\
+				 PAD_CTL_SRE_FAST)
+int sdhc_init(void)
+{
+	s32 status = 0;
+
+	switch (esdhc_active) {
+	case 0:
+		esdhc_base_pointer = (volatile u32 *)MMC_SDHC1_BASE_ADDR;
+
+//		mxc_request_iomux(MX51_PIN_GPIO1_0, IOMUX_CONFIG_ALT0 | IOMUX_CONFIG_SION);
+//		mxc_iomux_set_pad(MX51_PIN_GPIO1_0, SD1_PAD_CFG);
+
+		/* SD1_CMD */
+		mxc_request_iomux(MX51_PIN_SD1_CMD, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD1_CMD, SD1_PAD_CFG);
+
+		/* SD1_CLK */
+		mxc_request_iomux(MX51_PIN_SD1_CLK, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD1_CLK, SD1_PAD_CFG);
+
+		/* SD1_DATA0 */
+		mxc_request_iomux(MX51_PIN_SD1_DATA0, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD1_DATA0, SD1_PAD_CFG);
+
+		/* SD1_DATA1 */
+		mxc_request_iomux(MX51_PIN_SD1_DATA1, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD1_DATA1, SD1_PAD_CFG);
+
+		/* SD1_DATA2 */
+		mxc_request_iomux(MX51_PIN_SD1_DATA2, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD1_DATA2, SD1_PAD_CFG);
+
+		/* SD1_DATA3 */
+		mxc_request_iomux(MX51_PIN_SD1_DATA3, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD1_DATA3, SD1_PAD_CFG);
+		break;
+
+		status = 1;
+		break;
+	case 1:
+		esdhc_base_pointer = (volatile u32 *)MMC_SDHC2_BASE_ADDR;
+
+//		mxc_request_iomux(MX51_PIN_GPIO1_0, IOMUX_CONFIG_ALT0 | IOMUX_CONFIG_SION);
+//		mxc_iomux_set_pad(MX51_PIN_GPIO1_0, SD1_PAD_CFG);
+
+		/* SD2_CMD */
+		mxc_request_iomux(MX51_PIN_SD2_CMD, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD2_CMD, SD1_PAD_CFG);
+
+		/* SD2_CLK */
+		mxc_request_iomux(MX51_PIN_SD2_CLK, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD2_CLK, SD1_PAD_CFG);
+
+		/* SD2_DATA0 */
+		mxc_request_iomux(MX51_PIN_SD2_DATA0, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD2_DATA0, SD1_PAD_CFG);
+
+		/* SD2_DATA1 */
+		mxc_request_iomux(MX51_PIN_SD2_DATA1, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD2_DATA1, SD1_PAD_CFG);
+
+		/* SD2_DATA2 */
+		mxc_request_iomux(MX51_PIN_SD2_DATA2, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD2_DATA2, SD1_PAD_CFG);
+
+		/* SD2_DATA3 */
+		mxc_request_iomux(MX51_PIN_SD2_DATA3, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_SD2_DATA3, SD1_PAD_CFG);
+		break;
+
+		status = 1;
+		break;
+	case 2:
+	case 3:
+	default:
+		printf("*** ERROR: SD/MMC interface %d not supported\n", esdhc_active);
+		status = 1;
+		break;
+	}
+
+	return status;
+}
+#endif
+
+int board_init(void)
+{
+	system_rev = get_cpu_rev();
+
+	/* Increase freq to CONFIG_ARM_CLK_FREQ (800MHz) */
+	writel((CONFIG_PLL1_FREQ/CONFIG_ARM_CLK_FREQ)-1,
+		CCM_BASE_ADDR + CLKCTL_CACRR);
+
+	gd->bd->bi_arch_number = CONFIG_MACH_TYPE;
+	/* address of boot parameters */
+	gd->bd->bi_boot_params = CONFIG_SYS_SDRAM_1_BASE + 0x100;
+
+	setup_misc();
+	setup_uart();
+	setup_spi_io();
+	setup_nfc();
+	setup_fec();
+#ifdef CONFIG_I2C_MXC
+	setup_i2c(I2C2_BASE_ADDR);
+	i2c_init(CONFIG_SYS_I2C_SPEED, CONFIG_SYS_I2C_SLAVE);
+#endif
+	setup_display();
+	setup_usb();
+	setup_audio();
+	setup_eim();
+	setup_csi();
+	setup_keypad();
+	return 0;
+}
+
+
+#ifdef BOARD_LATE_INIT
+int board_late_init(void)
+{
+
+	return 0;
+}
+#endif
+
+/*************************************************************************
+ *  hw_watchdog_reset
+ *
+ *	This routine is called to reset (keep alive) the watchdog timer
+ *
+ ************************************************************************/
+#if defined(CONFIG_HW_WATCHDOG)
+void hw_watchdog_reset(void)
+{
+	struct wdog *imx_wdog1 = (struct wdog *)WDOG1_BASE_ADDR;
+	__raw_writew(0x5555, &imx_wdog1->wsr);
+	__raw_writew(0xaaaa, &imx_wdog1->wsr);
+}
+#endif
+
+int checkboard(void)
+{
+	printf("Board: Armadeus APF51 ");
+
+	puts("[");
+	switch (__raw_readl(SRC_BASE_ADDR + 0x8)) {
+	case 0x0001:
+		puts("POR");
+		break;
+	case 0x0009:
+		puts("RST");
+		break;
+	case 0x0010:
+	case 0x0011:
+		puts("WDOG");
+		break;
+	default:
+		puts("unknown");
+	}
+	puts("]\n");
+
+	return 0;
+}
+
+/*
+ * display dcd table. to delete
+ */
+int do_mx51_show_dcd_tab(cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	ulong i = 1;
+	char dcd_item[] = "MXC_DCD_ITEM(%ld, %ld, %#010lX, %#010lX)\n";
+
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS,
+				CONFIG_IOMUX_PAD_DRAM_RAS);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS,
+				CONFIG_IOMUX_PAD_DRAM_CAS);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE,
+				CONFIG_IOMUX_PAD_DRAM_SDWE);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0,
+				CONFIG_IOMUX_PAD_DRAM_SDCKE0);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1,
+				CONFIG_IOMUX_PAD_DRAM_SDCKE1);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK,
+				CONFIG_IOMUX_PAD_DRAM_SDCLK);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0,
+				CONFIG_IOMUX_PAD_DRAM_SDQS0);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1,
+				CONFIG_IOMUX_PAD_DRAM_SDQS1);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2,
+				CONFIG_IOMUX_PAD_DRAM_SDQS2);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3,
+				CONFIG_IOMUX_PAD_DRAM_SDQS3);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0,
+				CONFIG_IOMUX_PAD_DRAM_CS0);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1,
+				CONFIG_IOMUX_PAD_DRAM_CS1);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0,
+				CONFIG_IOMUX_PAD_DRAM_DQM0);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1,
+				CONFIG_IOMUX_PAD_DRAM_DQM1);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2,
+				CONFIG_IOMUX_PAD_DRAM_DQM2);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3,
+				CONFIG_IOMUX_PAD_DRAM_DQM3);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_EIM_SDBA2,
+//				CONFIG_IOMUX_PAD_EIM_SDBA2);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_EIM_SDODT1,
+//				CONFIG_IOMUX_PAD_EIM_SDODT1);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_PAD_EIM_SDODT0,
+//				CONFIG_IOMUX_PAD_EIM_SDODT0);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DDRPKS,
+				CONFIG_IOMUX_GRP_DDRPKS);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DRAM_B4,
+				CONFIG_IOMUX_GRP_DRAM_B4);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_INDDR,
+//				CONFIG_IOMUX_GRP_INDDR);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_PKEDDR,
+				CONFIG_IOMUX_GRP_PKEDDR);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DDR_A0,
+				CONFIG_IOMUX_GRP_DDR_A0);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DDR_A1,
+				CONFIG_IOMUX_GRP_DDR_A1);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DDRAPUS,
+//				CONFIG_IOMUX_GRP_DDRAPUS);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_HYSDDR0,
+//				CONFIG_IOMUX_GRP_HYSDDR0);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_HYSDDR1,
+//				CONFIG_IOMUX_GRP_HYSDDR1);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_HYSDDR2,
+//				CONFIG_IOMUX_GRP_HYSDDR2);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_HVDDR,
+//				CONFIG_IOMUX_GRP_HVDDR);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_HYSDDR3,
+//				CONFIG_IOMUX_GRP_HYSDDR3);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DRAM_SR_B0,
+				CONFIG_IOMUX_GRP_DRAM_SR_B0);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DDRAPKS,
+				CONFIG_IOMUX_GRP_DDRAPKS);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DRAM_SR_B1,
+				CONFIG_IOMUX_GRP_DRAM_SR_B1);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DDRPUS,
+				CONFIG_IOMUX_GRP_DDRPUS);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DRAM_SR_B2,
+				CONFIG_IOMUX_GRP_DRAM_SR_B2);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_PKEADDR,
+				CONFIG_IOMUX_GRP_PKEADDR);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DRAM_SR_B4,
+				CONFIG_IOMUX_GRP_DRAM_SR_B4);
+//	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_INMODE1,
+//				CONFIG_IOMUX_GRP_INMODE1);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DRAM_B0,
+				CONFIG_IOMUX_GRP_DRAM_B0);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DRAM_B1,
+				CONFIG_IOMUX_GRP_DRAM_B1);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DDR_SR_A0,
+				CONFIG_IOMUX_GRP_DDR_SR_A0);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DRAM_B2,
+				CONFIG_IOMUX_GRP_DRAM_B2);
+	printf(dcd_item, i++, 4, IOMUXC_BASE_ADDR + IOMUXC_SW_PAD_CTL_GRP_DDR_SR_A1,
+				CONFIG_IOMUX_GRP_DDR_SR_A1);
+
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCTL0, (CONFIG_SYS_SDRAM_ESDCTL_REGISTER_VAL&0x8FFFFFFF));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DRR_PRECHARGE_CMD(0, 0));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DRR_AUTOREFRESH_CMD(0));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DRR_AUTOREFRESH_CMD(0));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DRR_LMR_CMD(0, 0, CONFIG_SYS_DRR_MR_VAL));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DRR_LMR_CMD(0, 1, CONFIG_SYS_DRR_EMR_VAL));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DDR_NOP_CMD(0));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCTL0, CONFIG_SYS_SDRAM_ESDCTL_REGISTER_VAL);
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCFG0, CONFIG_SYS_SDRAM_ESDCFG_REGISTER_VAL);
+#if (CONFIG_NR_DRAM_BANKS > 1)
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCTL1, (CONFIG_SYS_SDRAM_ESDCTL_REGISTER_VAL&0x8FFFFFFF));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DRR_PRECHARGE_CMD(1, 0));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DRR_AUTOREFRESH_CMD(1));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DRR_AUTOREFRESH_CMD(1));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DRR_LMR_CMD(1, 0, CONFIG_SYS_DRR_MR_VAL));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DRR_LMR_CMD(1, 1, CONFIG_SYS_DRR_EMR_VAL));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, CONFIG_SYS_DDR_NOP_CMD(1));
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCTL1, CONFIG_SYS_SDRAM_ESDCTL_REGISTER_VAL);
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCFG1, CONFIG_SYS_SDRAM_ESDCFG_REGISTER_VAL);
+#endif  /* CONFIG_NR_DRAM_BANKS > 1 */
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDMISC, CONFIG_SYS_SDRAM_ESDMISC_REGISTER_VAL);
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDSCR, 0x00000000);
+
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCDLYGD, CONFIG_SYS_SDRAM_ESDGPR_REGISTER_VAL);
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCDLY1, CONFIG_SYS_SDRAM_ESDCDLY1_REGISTER_VAL);
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCDLY2, CONFIG_SYS_SDRAM_ESDCDLY2_REGISTER_VAL);
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCDLY3, CONFIG_SYS_SDRAM_ESDCDLY3_REGISTER_VAL);
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCDLY4, CONFIG_SYS_SDRAM_ESDCDLY4_REGISTER_VAL);
+	printf(dcd_item, i++, 4, ESDCTL_BASE_ADDR + ESDCTL_ESDCDLY5, CONFIG_SYS_SDRAM_ESDCDLY5_REGISTER_VAL);
+
+	return 0;
+}
+
+/***************************************************/
+
+U_BOOT_CMD(
+	dcdshow,	CONFIG_SYS_MAXARGS,	1,	do_mx51_show_dcd_tab,
+	"display mx51 dcd tab\n",
+	""
+);
+
+
diff -purN u-boot-2010.03-ref/board/armadeus/apf51/config.mk u-boot-2010.03/board/armadeus/apf51/config.mk
--- u-boot-2010.03-ref/board/armadeus/apf51/config.mk	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2010.03/board/armadeus/apf51/config.mk	2010-09-16 22:55:20.000000000 +0200
@@ -0,0 +1,2 @@
+LDSCRIPT := $(SRCTREE)/board/$(BOARDDIR)/u-boot.lds
+TEXT_BASE = 0x9FF00000
diff -purN u-boot-2010.03-ref/board/armadeus/apf51/Makefile u-boot-2010.03/board/armadeus/apf51/Makefile
--- u-boot-2010.03-ref/board/armadeus/apf51/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2010.03/board/armadeus/apf51/Makefile	2010-09-16 19:04:20.000000000 +0200
@@ -0,0 +1,50 @@
+#
+# Copyright (C) 2007, Guennadi Liakhovetski <lg@denx.de>
+#
+# (C) Copyright 2009 Freescale Semiconductor, Inc.
+# (C) Copyright 2010 Eric Jarrige, Armadeus Project
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+include $(TOPDIR)/config.mk
+
+LIB	 = $(obj)lib$(BOARD).a
+
+COBJS	:= apf51.o
+SOBJS	:=
+
+SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
+OBJS	:= $(addprefix $(obj),$(COBJS))
+SOBJS	:= $(addprefix $(obj),$(SOBJS))
+
+$(LIB):	$(obj).depend $(OBJS) $(SOBJS)
+	$(AR) $(ARFLAGS) $@ $(OBJS) $(SOBJS)
+
+clean:
+	rm -f $(SOBJS) $(OBJS)
+
+distclean:	clean
+	rm -f $(LIB) core *.bak .depend
+
+#########################################################################
+
+# defines $(obj).depend target
+include $(SRCTREE)/rules.mk
+
+sinclude $(obj).depend
+
+#########################################################################
diff -purN u-boot-2010.03-ref/board/armadeus/apf51/u-boot.lds u-boot-2010.03/board/armadeus/apf51/u-boot.lds
--- u-boot-2010.03-ref/board/armadeus/apf51/u-boot.lds	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2010.03/board/armadeus/apf51/u-boot.lds	2010-09-16 22:10:12.000000000 +0200
@@ -0,0 +1,64 @@
+/*
+ * January 2004 - Changed to support H4 device
+ * Copyright (c) 2004 Texas Instruments
+ *
+ * (C) Copyright 2002
+ * Gary Jennejohn, DENX Software Engineering, <gj@denx.de>
+ *
+ * (C) Copyright 2009 Freescale Semiconductor, Inc.
+ * (C) Copyright 2010 Eric Jarrige, Armadeus Project
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
+OUTPUT_ARCH(arm)
+ENTRY(_start)
+SECTIONS
+{
+	. = 0x00000000;
+
+	. = ALIGN(4);
+	.text	   :
+	{
+	  /* WARNING - the following is hand-optimized to fit within	*/
+	  /* the sector layout of our flash chips!	XXX FIXME XXX	*/
+	  cpu/arm_cortexa8/start.o
+	  *(.text)
+	}
+
+	. = ALIGN(4);
+	.rodata : { *(.rodata) }
+
+	. = ALIGN(4);
+	.data : { *(.data) }
+
+	. = ALIGN(4);
+	.got : { *(.got) }
+
+	. = .;
+	__u_boot_cmd_start = .;
+	.u_boot_cmd : { *(.u_boot_cmd) }
+	__u_boot_cmd_end = .;
+
+	. = ALIGN(4);
+	__bss_start = .;
+	.bss : { *(.bss) }
+	_end = .;
+}
diff -purN u-boot-2010.03-ref/include/asm-arm/mach-types.h u-boot-2010.03/include/asm-arm/mach-types.h
--- u-boot-2010.03-ref/include/asm-arm/mach-types.h	2010-03-31 23:54:39.000000000 +0200
+++ u-boot-2010.03/include/asm-arm/mach-types.h	2010-05-24 22:38:29.000000000 +0200
@@ -2699,6 +2699,7 @@ extern unsigned int __machine_arch_type;
 #define MACH_TYPE_MX53_EVK             2716
 #define MACH_TYPE_IGEP0030             2717
 #define MACH_TYPE_AXELL_H40_H50_CTRL   2718
+#define MACH_TYPE_APF51                2795
 
 #ifdef CONFIG_ARCH_EBSA110
 # ifdef machine_arch_type
@@ -34944,6 +34945,18 @@ extern unsigned int __machine_arch_type;
 # define machine_is_axell_h40_h50_ctrl()	(0)
 #endif
 
+#ifdef CONFIG_MACH_APF51
+# ifdef machine_arch_type
+#  undef machine_arch_type
+#  define machine_arch_type	__machine_arch_type
+# else
+#  define machine_arch_type	MACH_TYPE_APF51
+# endif
+# define machine_is_apf51()	(machine_arch_type == MACH_TYPE_APF51)
+#else
+# define machine_is_apf51()	(0)
+#endif
+
 /*
  * These have not yet been registered
  */
diff -purN u-boot-2010.03-ref/MAKEALL u-boot-2010.03/MAKEALL
--- u-boot-2010.03-ref/MAKEALL	2010-09-16 23:11:51.000000000 +0200
+++ u-boot-2010.03/MAKEALL	2010-05-16 11:05:33.000000000 +0200
@@ -549,6 +549,7 @@ LIST_ARM9="			\
 	ap946es			\
 	ap966			\
 	apf27			\
+	apf51			\
 	cp920t			\
 	cp922_XA10		\
 	cp926ejs		\
diff -purN u-boot-2010.03-ref/Makefile u-boot-2010.03/Makefile
--- u-boot-2010.03-ref/Makefile	2010-09-16 23:11:51.000000000 +0200
+++ u-boot-2010.03/Makefile	2010-05-16 11:10:10.000000000 +0200
@@ -2735,6 +2735,9 @@ afeb9260_config:	unconfig
 apf27_config		:	unconfig
 	@$(MKCONFIG) $(@:_config=) arm arm926ejs apf27 armadeus mx27
 
+apf51_config		:	unconfig
+	@$(MKCONFIG) $(@:_config=) arm arm_cortexa8 apf51 armadeus mx51
+
 at91cap9adk_config	:	unconfig
 	@$(MKCONFIG) $(@:_config=) arm arm926ejs at91cap9adk atmel at91
 
